/* 
 This file was generated by Dashcode.  
 You may edit this file to customize your widget or web page 
 according to the license.txt file included in the project.
 */

//
// Function: load()
// Called by HTML body element's onload event when the widget is ready to start
//
function load()
{
    dashcode.setupParts();
}

//
// Function: remove()
// Called when the widget has been removed from the Dashboard
//
function remove()
{
    // Stop any timers to prevent CPU usage
    // Remove any preferences as needed
    // widget.setPreferenceForKey(null, dashcode.createInstancePreferenceKey("your-key"));
}

//
// Function: hide()
// Called when the widget has been hidden
//
function hide()
{
    // Stop any timers to prevent CPU usage
}

//
// Function: show()
// Called when the widget has been shown
//
function show()
{
    // Restart any timers that were stopped on hide
    loadForecastImage();
}

//
// Function: sync()
// Called when the widget has been synchronized with .Mac
//
function sync()
{
    // Retrieve any preference values that you need to be synchronized here
    // Use this for an instance key's value:
    // instancePreferenceValue = widget.preferenceForKey(null, dashcode.createInstancePreferenceKey("your-key"));
    //
    // Or this for global key's value:
    // globalPreferenceValue = widget.preferenceForKey(null, "your-key");
}

//
// Function: showBack(event)
// Called when the info button is clicked to show the back of the widget
//
// event: onClick event from the info button
//
function showBack(event)
{
    var front = document.getElementById("front");
    var back = document.getElementById("back");

    if (window.widget) {
        widget.prepareForTransition("ToBack");
    }

    front.style.display = "none";
    back.style.display = "block";

    if (window.widget) {
        setTimeout('widget.performTransition();', 0);
    }
}

//
// Function: showFront(event)
// Called when the done button is clicked from the back of the widget
//
// event: onClick event from the done button
//
function showFront(event)
{
    widget.setPreferenceForKey(document.getElementById("rowTF").value,"row");
    widget.setPreferenceForKey(document.getElementById("colTF").value,"col");
    
    var front = document.getElementById("front");
    var back = document.getElementById("back");

    if (window.widget) {
        widget.prepareForTransition("ToFront");
    }

    front.style.display="block";
    back.style.display="none";

    if (window.widget) {
        setTimeout('widget.performTransition();', 0);
    }
    
    show();

}

if (window.widget) {
    widget.onremove = remove;
    widget.onhide = hide;
    widget.onshow = show;
    widget.onsync = sync;
}

function loadForecastImage() {
    var img = document.getElementById("image1");
    var scrollAreaToChange = document.getElementById("scrollArea");

    var date="20130709"; // sample

    var cd = new Date();

    var tzOffset = cd.getTimezoneOffset()/60+2;
    var hour = cd.getHours()+tzOffset;
    if (hour < 6) { // if yesterdays forecast
        hour=18;
        cd.setDate( cd.getDate()-1 );
    }
    else if (hour < 12) hour=0;
    else if (hour < 18) hour=6;
    else hour=12;

    var day = cd.getDate();
    var month = cd.getMonth() + 1;
    var year = cd.getFullYear();
    date = year+(month<10?"0"+month:month)+(day<10?"0"+day:day);
    date += (hour<10?"0"+hour:hour);
//    document.getElementById("textField").value = date;
    
    var row = document.getElementById("rowTF").value;
    var col = document.getElementById("colTF").value;
    var newScrollAreaContent = "<img style='float:left' src='http://www.meteo.pl/um/metco/mgram_pict.php?ntype=0u&fdate="+date+"12&row="+row+"&col="+col+"&lang=pl'>";
    if (with_legend) {
        newScrollAreaContent = "<img style='float:left' src='http://www.meteo.pl/um/metco/leg_um_pl_20120615.png'>";
        document.getElementById("frontImg").width=document.getElementById("frontImg").width+50;
    }
    scrollAreaToChange.object.content.innerHTML = newScrollAreaContent;
    scrollAreaToChange.object.refresh();
}

function getDefaultPrefeneceForKey( def, key ) {
    var v = widget.preferenceForKey( key );
    if (!v) v=def;
    return v;
}

function myLoadHandler(event) {
    var row = widget.preferenceForKey("row");
    if (!row) row=418;
    document.getElementById("rowTF").value = getDefaultPrefeneceForKey( 418, "row" );
    document.getElementById("colTF").value = getDefaultPrefeneceForKey( 223, "col" );
    
    var popup = document.getElementById("popup");
    while (popup.length>0) popup.remove(0);

    var i=0;
    for (i=0;i<XX.length;i++) {
        popup.add( new Option(CITY_NAMES[i],i),i==0?null:popup.options[popup.length-1] );
    }
    popup.selectedIndex=0;
}

XX=[0,121,285,179,216,199,210,152,299,215,244,418,402,115,232,35,223,127,277,355,240,196,101,180,133,294,269,142,203,298,209,250,166,316,181,155,155 ];
YY=[0,394,379,519,537,381,346,390,182,461,443,440,539,305,466,535,418,574,432,352,363,449,185,400,462,272,465,370,209,203,383,406,516,334,436,412,583 ];
CITY_NAMES=["","Berlin","Białystok","Bratysława","Budapeszt","Bydgoszcz","Gdańsk","Gorzów Wielkopolski","Helsinki","Katowice","Kielce","Kijów","Kiszyniów","Kopenhaga","Kraków","Liechtenstein","Łódź","Lublana","Lublin","Mińsk","Olsztyn","Opole","Oslo","Poznań","Praga","Ryga","Rzeszów","Szczecin","Sztokholm","Tallinn","Toruń","Warszawa","Wiedeń","Wilno","Wrocław","Zielona Góra","Zagrzeb"];


with_legend = false;

function citySelectedOnClick(event)
{
    var popup = document.getElementById("popup");
    if (popup.selectedIndex>0) {
        document.getElementById("rowTF").value = YY[popup.options[popup.selectedIndex].value];
        document.getElementById("colTF").value = XX[popup.options[popup.selectedIndex].value];
    }
}


function imageClicked(event)
{
    with_legend = !with_legend;    
    loadForecastImage();
}


function latLongOnClick(event)
{
    var latStr = document.getElementById("latTF").value;
    var longStr = document.getElementById("longTF").value;
    
    var lat = parseFloat( latStr );
    var long = parseFloat( longStr );
    if (!isNaN(lat) && !isNaN(long)) {
        document.getElementById("rowTF").value = Math.round(-27.23*lat+1820.3);
        document.getElementById("colTF").value = Math.round(17.09*long-108.61);
    }
}
