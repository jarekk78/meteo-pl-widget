/* 
 This file was generated by Dashcode.  
 You may edit this file to customize your widget or web page 
 according to the license.txt file included in the project.
 */

var displayed_forecast = '';

//
// Function: load()
// Called by HTML body element's onload event when the widget is ready to start
//
function load()
{
    dashcode.setupParts();
}

//
// Function: remove()
// Called when the widget has been removed from the Dashboard
//
function remove()
{
    // Stop any timers to prevent CPU usage
    // Remove any preferences as needed
    // widget.setPreferenceForKey(null, dashcode.createInstancePreferenceKey("your-key"));
}

//
// Function: hide()
// Called when the widget has been hidden
//
function hide()
{
    // Stop any timers to prevent CPU usage
}

//
// Function: show()
// Called when the widget has been shown
//
function show()
{
    // Restart any timers that were stopped on hide
    loadForecastImage();
}

//
// Function: sync()
// Called when the widget has been synchronized with .Mac
//
function sync()
{
    // Retrieve any preference values that you need to be synchronized here
    // Use this for an instance key's value:
    // instancePreferenceValue = widget.preferenceForKey(null, dashcode.createInstancePreferenceKey("your-key"));
    //
    // Or this for global key's value:
    // globalPreferenceValue = widget.preferenceForKey(null, "your-key");
}

//
// Function: showBack(event)
// Called when the info button is clicked to show the back of the widget
//
// event: onClick event from the info button
//
function showBack(event)
{
    var front = document.getElementById("front");
    var back = document.getElementById("back");

    if (window.widget) {
        widget.prepareForTransition("ToBack");
    }

    front.style.display = "none";
    back.style.display = "block";

    if (window.widget) {
        setTimeout('widget.performTransition();', 0);
    }
}

//
// Function: showFront(event)
// Called when the done button is clicked from the back of the widget
//
// event: onClick event from the done button
//
function showFront(event)
{
    widget.setPreferenceForKey(document.getElementById("rowTF").value,"row");
    widget.setPreferenceForKey(document.getElementById("colTF").value,"col");
    widget.setPreferenceForKey(document.getElementById("rowTF1").value,"row1");
    widget.setPreferenceForKey(document.getElementById("colTF1").value,"col1");
    widget.setPreferenceForKey(document.getElementById("modelSelectPopup").selectedIndex,"model");
    widget.setPreferenceForKey(document.getElementById("delayTF").value,"delay");
    widget.setPreferenceForKey(document.getElementById("delayTF2").value,"delay2");
    
    var front = document.getElementById("front");
    var back = document.getElementById("back");

    if (window.widget) {
        widget.prepareForTransition("ToFront");
    }

    front.style.display="block";
    back.style.display="none";

    if (window.widget) {
        setTimeout('widget.performTransition();', 0);
    }
    
    show();

}

if (window.widget) {
    widget.onremove = remove;
    widget.onhide = hide;
    widget.onshow = show;
    widget.onsync = sync;
}

function get( elementId ) {
    return document.getElementById( elementId).value;
}

function set( elementId, val ) {
    document.getElementById( elementId).value = val;
}

function loadForecastImage() {
    var img = document.getElementById("image1");
    var scrollAreaToChange = document.getElementById("scrollArea");

    var date="20130709"; // sample

    var model = (modelSelectPopup.options[modelSelectPopup.selectedIndex].value == "UM");
    if (modelSelectPopup.options[modelSelectPopup.selectedIndex].value != modelSelectPopup1.options[modelSelectPopup1.selectedIndex].value)
        model = (modelSelectPopup1.options[modelSelectPopup1.selectedIndex].value == "UM");

    var cd = new Date();
    cd.setHours( cd.getHours() - parseInt(document.getElementById(model?"delayTF":"delayTF2").value) -6*(
    
    model ? (100-document.getElementById("slider").value):((Math.round((100-document.getElementById("slider").value) )/2)*2)
    ) );
    
    var tzOffset = cd.getTimezoneOffset()/60+2;
    var hour = cd.getHours()+tzOffset;
    
    if (hour < 6) { // if yesterdays forecast
        hour=18;
        cd.setDate( cd.getDate()-1 );
    }
    else if (hour < 12) hour=0;
    else if (hour < 18) hour=6;
    else hour=12;

    if (!model) {
        if (hour<12) hour=0;
        else hour=12;
    }
    var day = cd.getDate();
    var month = cd.getMonth() + 1;
    var year = cd.getFullYear();
    date = year+(month<10?"0"+month:month)+(day<10?"0"+day:day)+(hour<10?"0"+hour:hour);
  
    var row = get("rowTF"+(model?"":"1"));
    var col = get("colTF"+(model?"":"1"));

    var tobe_displayed_forecast = date+(with_legend?"Leg":"NoL")+(model?1:0)+row+","+col;
    
    if (tobe_displayed_forecast == displayed_forecast) return;
    
    var newScrollAreaContent = "";

    var width = with_legend?370:540;
  
    var img_src = "";  
    if (model) 
        img_src = "http://www.meteo.pl/um/metco/mgram_pict.php?ntype=0u&fdate="+date+"&row="+row+"&col="+col+"&lang=pl";
    else 
        img_src = "http://www.meteo.pl/metco/mgram_pict.php?ntype=2n&fdate="+date+"&row="+row+"&col="+col+"&lang=pl";

    // preloading...
	var img = new Image();
	img.src = img_src;
	img.onload = function() {
        document.getElementById("FailedToLoadLabel").style.opacity = 0;
        newScrollAreaContent = "<img style='float:left' width="+width+" height=660 src='"+img_src+"'>";
        if (with_legend) {
            if (model)
                newScrollAreaContent = "<img width="+(540-width)+" height=660 style='float:left' src='http://www.meteo.pl/um/metco/leg_um_pl_20120615.png'>"+newScrollAreaContent;
            else
                newScrollAreaContent = "<img width="+(540-width)+" height=660 style='float:left' src='http://www.meteo.pl/metco/leg4_pl.png'>"+newScrollAreaContent;
        }
        scrollAreaToChange.object.content.innerHTML = newScrollAreaContent;
        scrollAreaToChange.object.refresh();
    
        displayed_forecast = tobe_displayed_forecast;
	};
	img.onerror = function() {
        document.getElementById("FailedToLoadLabel").style.opacity = 1;
	};
    // â€¦preloading.
}

function getDefaultPrefeneceForKey( def, key ) {
    var v = widget.preferenceForKey( key );
    if (!v) v=def;
    return v;
}

function fillPopup( popupName, list ) {
    var popup = document.getElementById(popupName);
    while (popup.length>0) popup.remove(0);

    var i=0;
    for (i=0;i<list.length;i++) {
        popup.add( new Option(list[i][0],i),i==0?null:popup.options[popup.length-1] );
    }
    popup.selectedIndex=0;
}

function myLoadHandler(event) {
    set( "rowTF", getDefaultPrefeneceForKey( 418, "row" ) );
    set( "colTF", getDefaultPrefeneceForKey( 223, "col" ) );
    set( "rowTF1", getDefaultPrefeneceForKey( 137, "row1" ) );
    set( "colTF1", getDefaultPrefeneceForKey( 88, "col1" ) );
    document.getElementById("modelSelectPopup").selectedIndex = getDefaultPrefeneceForKey( 0, "model" );
    document.getElementById("modelSelectPopup1").selectedIndex = document.getElementById("modelSelectPopup").selectedIndex;
    set( "delayTF", getDefaultPrefeneceForKey( 0, "delay" ) );
    set( "delayTF2", getDefaultPrefeneceForKey( 0, "delay2" ) );

    
    fillPopup("popup", cities_um);
    fillPopup("popup2", cities_coamps);
}

with_legend = false;

function citySelectedOnClick(event)
{
    var popup = document.getElementById("popup");
    if (popup.selectedIndex>0) {
        set("rowTF", cities_um[popup.options[popup.selectedIndex].value][3] );
        set("colTF", cities_um[popup.options[popup.selectedIndex].value][2] );
    }
}


function imageClicked(event)
{
    with_legend = !with_legend;    
    loadForecastImage();
}


function latLongOnClick(event)
{
    var lat = parseFloat( get("latTF") );
    var long = parseFloat( get("longTF") );
    if (!isNaN(lat) && !isNaN(long)) {
        set( "rowTF", Math.round(-27.23*lat+1820.3) );
        set( "colTF", Math.round(17.09*long-108.61) );
    }
}


function selectedCityCOAMPS(event)
{
    var popup = document.getElementById("popup2");
    if (popup.selectedIndex>0) {
        set( "rowTF1", cities_coamps[popup.options[popup.selectedIndex].value][3] );
        set( "colTF1", cities_coamps[popup.options[popup.selectedIndex].value][2] );
    }
}


function switchModelFront(event) {
    loadForecastImage();
}


function delaySliderChange(event) {
    loadForecastImage();
}


function earlierBtnClick(event) {
    set("slider", get("slider")-1);
    loadForecastImage();
}


function laterBtnClick(event) {
    var val = get("slider");
    val++;
    set("slider", val);
    loadForecastImage();
}


function failedToLoadLabelClicked(event) {
    loadForecastImage();
}
